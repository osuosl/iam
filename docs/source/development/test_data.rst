.. _test_data:

Test Data
=========

Iam is equipped with a data exporting and importing classes that can extract
a complete set of anonymized client, project, resource and measurement data
from a staging or production instance. This data can then be imported into a
development instance in Docker or elsewhere to test features with a realistic
set of data.

DataImporter
------------

The DataImporter class contains methods for importing test data generated by
the DateExporter class.

Before importing data, be sure that data files exist in the test_data directory.
A set of test data should be included in this repository. If this data is
out of date, see DataExporter below for instructions on exporting new data.

**Usage**

.. warning::

  This function destroys all data in the currently configured database and
  should only ever be used in the environment of a Docker or other
  development instance of the application. MAKE SURE YOUR INSTANCE IS NOT
  CONFIGURED TO USE THE PRODUCTION OR STAGING DATABASES!

If using docker-compose to run a dev instance, first make sure the DB_URL
variable in dockerfiles/app.env is **not** set to sqlite://test.sqlite. The test
runner will overwrite test.sqlite on every docker launch.

If it was set to this value before, you will probably need to rebuild your
docker image to pick up the new db filename.

If using docker-compose, start a bash shell on the docker instance:

.. code-block:: bash

  docker-compose run dev bash

Run the import-data rake task:

.. code-block:: bash

  rake import_data

If you are running ruby from RVM:

.. code-block:: bash

  rvm all do rake import_data

The rake task will remind you that this action will destroy all data in the
current database and require you to type 'YES' to continue. It will take some
time to load all the data.


DataExporter
------------

The DataExporter class takes a list of client ids and a timeframe in days, and
writes the data in json format to a series of files in the test_data
subdirectory. Each model or measurement table will be written to a separate
file named for the model or table.

It's a good idea to browse through the application you will be exporting from
and make sure that the clients you are exporting have appropriate data. Avoid
clients whose projects have very large numbers of resources, as this will export
a large amount of test data. A good selection would include clients with
different combinations of resources.

By default this will export all measurement data collected in the last 60 days.

**Usage**

In the environment of a staging or production instance of the app (an instance
that has collected significant real-world data):

This will extract all data associated with the specified clients, including all
measuremnts for all resources. The data will be anonymized by substituting any
names, email addresses, host name or ip addresses with random data while
maintaing the relationships between clients, projects, resources, and
measurements.

.. note::

  On stanging and production, you'll need to use the RVM ruby to run the rake
  commands. Add 'rvm 2.3.0 do' in front of any rake commands.

To export data with default options (60 days of anonymized data for all clients)

.. code-block:: bash

  rake export_data

or, using rvm:

.. code-block:: bash

  rvm all do rake export_data

If you would like to set a different time frame, set the EXPORT_DATA_DAYS
environment variable. This should be an integer number of days, the default is
60.

.. code-block:: bash

  rake export_data EXPORT_DATA_DAYS=60

.. note::

  You can set any of the environment variables before running the command, or
  include them on the command line as shown in the exmaples. Don't forget that
  these variables are set in your environment, you may need to unset or change
  their values.

If you would like to set a specific list of clients (recommended),
set the EXPORT_DATA_CLIENTS environment variable. You can find the ids of the
clients in the application Clients view.

.. code-block:: bash

  rake export_data EXPORT_DATA_CLIENTS=<client_id>,<client_id>,<client_id>

example:

.. code-block:: bash

  rake export_data EXPORT_DATA_CLIENTS=1,2,5

If you would like to export data without anonymizing it, you can set the
EXPORT_DATA_ANON environment variable to 'false'

.. code-block:: bash

  rake export_data EXPORT_DATA_ANON='false'

You may set any or all variables at the same time (don't forget about previously
set variables!)

.. code-block:: bash

  rake export_data EXPORT_DATA_DAYS=30 EXPORT_DATA_CLIENTS=1,2,6
  rake export_data EXPORT_DATA_DAYS=20 EXPORT_DATA_ANON='false'
